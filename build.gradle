plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.0"

    id "idea"
    id "maven"

    id "org.jetbrains.dokka" version "0.10.1"
    id "com.diffplug.gradle.spotless" version "3.27.1"
    id "com.github.ben-manes.versions" version "0.28.0"

    id "io.gitlab.arturbosch.detekt" version "1.5.1"

    id "edu.wpi.first.GradleRIO" version "2020.3.2"
}

def ROBOT_MAIN_CLASS = "org.frc1778.robot.MainKt"

deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamOrDefault(1778)
        }
    }
    artifacts {
        frcJavaArtifact("frcJava") {
            targets << "roborio"
            debug = frc.getDebugOrDefault(false)
        }
        fileTreeArtifact("frcStaticFileDeploy") {
            files = fileTree(dir: "src/main/deploy")
            targets << "roborio"
            directory = "/home/lvuser/deploy"
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "com.github.MTHSRoboticsClub:freezylib:-SNAPSHOT"
    implementation "org.ghrobotics:FalconLibrary:2020.2.3"

    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation "io.kotlintest:kotlintest-runner-junit5:+"
}

jar {
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions{
        jvmTarget = "1.8"
    }
    dependsOn "spotlessApply"
}

test {
    useJUnitPlatform {}
}

wrapper {
    gradleVersion = "6.1.1"
}

spotless {
    kotlin { ktlint() }
    java { googleJavaFormat("1.7") }
    kotlinGradle { ktlint() }
}

detekt {
    buildUponDefaultConfig = true
    config = files("$rootDir/config/detekt/config.yml")
}
